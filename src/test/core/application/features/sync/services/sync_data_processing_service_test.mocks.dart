// Mocks generated by Mockito 5.4.5 from annotations
// in whph/test/core/application/features/sync/services/sync_data_processing_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:acore/acore.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:whph/core/application/features/sync/models/paginated_sync_data.dart'
    as _i3;
import 'package:whph/core/application/features/sync/services/sync_conflict_resolution_service.dart'
    as _i4;
import 'package:whph/core/application/features/tasks/services/abstraction/i_task_repository.dart'
    as _i7;
import 'package:whph/core/application/shared/services/abstraction/i_repository.dart'
    as _i5;
import 'package:whph/core/domain/features/tasks/models/task_with_total_duration.dart'
    as _i8;
import 'package:whph/core/domain/features/tasks/task.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePaginatedSyncData_0<T1 extends _i1.BaseEntity<dynamic>>
    extends _i2.SmartFake implements _i3.PaginatedSyncData<T1> {
  _FakePaginatedSyncData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePaginatedList_1<T1> extends _i2.SmartFake
    implements _i1.PaginatedList<T1> {
  _FakePaginatedList_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConflictResolutionResult_2<T1 extends _i1.BaseEntity<String>>
    extends _i2.SmartFake implements _i4.ConflictResolutionResult<T1> {
  _FakeConflictResolutionResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIRepository<T extends _i1.BaseEntity<TId>, TId> extends _i2.Mock
    implements _i5.IRepository<T, TId> {
  MockIRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.PaginatedSyncData<T>> getPaginatedSyncData(
    DateTime? lastSyncDate, {
    int? pageIndex = 0,
    int? pageSize = 200,
    String? entityType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaginatedSyncData,
          [lastSyncDate],
          {
            #pageIndex: pageIndex,
            #pageSize: pageSize,
            #entityType: entityType,
          },
        ),
        returnValue: _i6.Future<_i3.PaginatedSyncData<T>>.value(
            _FakePaginatedSyncData_0<T>(
          this,
          Invocation.method(
            #getPaginatedSyncData,
            [lastSyncDate],
            {
              #pageIndex: pageIndex,
              #pageSize: pageSize,
              #entityType: entityType,
            },
          ),
        )),
      ) as _i6.Future<_i3.PaginatedSyncData<T>>);

  @override
  _i6.Future<void> hardDeleteSoftDeleted(DateTime? beforeDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #hardDeleteSoftDeleted,
          [beforeDate],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> truncate() => (super.noSuchMethod(
        Invocation.method(
          #truncate,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i1.PaginatedList<T>> getList(
    int? pageIndex,
    int? pageSize, {
    bool? includeDeleted = false,
    _i1.CustomWhereFilter? customWhereFilter,
    List<_i1.CustomOrder>? customOrder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getList,
          [
            pageIndex,
            pageSize,
          ],
          {
            #includeDeleted: includeDeleted,
            #customWhereFilter: customWhereFilter,
            #customOrder: customOrder,
          },
        ),
        returnValue:
            _i6.Future<_i1.PaginatedList<T>>.value(_FakePaginatedList_1<T>(
          this,
          Invocation.method(
            #getList,
            [
              pageIndex,
              pageSize,
            ],
            {
              #includeDeleted: includeDeleted,
              #customWhereFilter: customWhereFilter,
              #customOrder: customOrder,
            },
          ),
        )),
      ) as _i6.Future<_i1.PaginatedList<T>>);

  @override
  _i6.Future<List<T>> getAll({
    bool? includeDeleted = false,
    _i1.CustomWhereFilter? customWhereFilter,
    List<_i1.CustomOrder>? customOrder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
          {
            #includeDeleted: includeDeleted,
            #customWhereFilter: customWhereFilter,
            #customOrder: customOrder,
          },
        ),
        returnValue: _i6.Future<List<T>>.value(<T>[]),
      ) as _i6.Future<List<T>>);

  @override
  _i6.Future<T?> getById(
    TId? id, {
    bool? includeDeleted = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
          {#includeDeleted: includeDeleted},
        ),
        returnValue: _i6.Future<T?>.value(),
      ) as _i6.Future<T?>);

  @override
  _i6.Future<T?> getFirst(
    _i1.CustomWhereFilter? customWhereFilter, {
    bool? includeDeleted = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFirst,
          [customWhereFilter],
          {#includeDeleted: includeDeleted},
        ),
        returnValue: _i6.Future<T?>.value(),
      ) as _i6.Future<T?>);

  @override
  _i6.Future<void> add(T? item) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [item],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> update(T? item) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [item],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> delete(T? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ITaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITaskRepository extends _i2.Mock implements _i7.ITaskRepository {
  MockITaskRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i1.PaginatedList<_i8.TaskWithTotalDuration>>
      getListWithTotalDuration(
    int? pageIndex,
    int? pageSize, {
    bool? includeDeleted = false,
    _i1.CustomWhereFilter? customWhereFilter,
    List<_i1.CustomOrder>? customOrder,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getListWithTotalDuration,
              [
                pageIndex,
                pageSize,
              ],
              {
                #includeDeleted: includeDeleted,
                #customWhereFilter: customWhereFilter,
                #customOrder: customOrder,
              },
            ),
            returnValue:
                _i6.Future<_i1.PaginatedList<_i8.TaskWithTotalDuration>>.value(
                    _FakePaginatedList_1<_i8.TaskWithTotalDuration>(
              this,
              Invocation.method(
                #getListWithTotalDuration,
                [
                  pageIndex,
                  pageSize,
                ],
                {
                  #includeDeleted: includeDeleted,
                  #customWhereFilter: customWhereFilter,
                  #customOrder: customOrder,
                },
              ),
            )),
          ) as _i6.Future<_i1.PaginatedList<_i8.TaskWithTotalDuration>>);

  @override
  _i6.Future<List<_i9.Task>> getByParentTaskId(String? parentTaskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByParentTaskId,
          [parentTaskId],
        ),
        returnValue: _i6.Future<List<_i9.Task>>.value(<_i9.Task>[]),
      ) as _i6.Future<List<_i9.Task>>);

  @override
  _i6.Future<List<_i9.Task>> getByRecurrenceParentId(
          String? recurrenceParentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByRecurrenceParentId,
          [recurrenceParentId],
        ),
        returnValue: _i6.Future<List<_i9.Task>>.value(<_i9.Task>[]),
      ) as _i6.Future<List<_i9.Task>>);

  @override
  _i6.Future<_i3.PaginatedSyncData<_i9.Task>> getPaginatedSyncData(
    DateTime? lastSyncDate, {
    int? pageIndex = 0,
    int? pageSize = 200,
    String? entityType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaginatedSyncData,
          [lastSyncDate],
          {
            #pageIndex: pageIndex,
            #pageSize: pageSize,
            #entityType: entityType,
          },
        ),
        returnValue: _i6.Future<_i3.PaginatedSyncData<_i9.Task>>.value(
            _FakePaginatedSyncData_0<_i9.Task>(
          this,
          Invocation.method(
            #getPaginatedSyncData,
            [lastSyncDate],
            {
              #pageIndex: pageIndex,
              #pageSize: pageSize,
              #entityType: entityType,
            },
          ),
        )),
      ) as _i6.Future<_i3.PaginatedSyncData<_i9.Task>>);

  @override
  _i6.Future<void> hardDeleteSoftDeleted(DateTime? beforeDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #hardDeleteSoftDeleted,
          [beforeDate],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> truncate() => (super.noSuchMethod(
        Invocation.method(
          #truncate,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i1.PaginatedList<_i9.Task>> getList(
    int? pageIndex,
    int? pageSize, {
    bool? includeDeleted = false,
    _i1.CustomWhereFilter? customWhereFilter,
    List<_i1.CustomOrder>? customOrder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getList,
          [
            pageIndex,
            pageSize,
          ],
          {
            #includeDeleted: includeDeleted,
            #customWhereFilter: customWhereFilter,
            #customOrder: customOrder,
          },
        ),
        returnValue: _i6.Future<_i1.PaginatedList<_i9.Task>>.value(
            _FakePaginatedList_1<_i9.Task>(
          this,
          Invocation.method(
            #getList,
            [
              pageIndex,
              pageSize,
            ],
            {
              #includeDeleted: includeDeleted,
              #customWhereFilter: customWhereFilter,
              #customOrder: customOrder,
            },
          ),
        )),
      ) as _i6.Future<_i1.PaginatedList<_i9.Task>>);

  @override
  _i6.Future<List<_i9.Task>> getAll({
    bool? includeDeleted = false,
    _i1.CustomWhereFilter? customWhereFilter,
    List<_i1.CustomOrder>? customOrder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
          {
            #includeDeleted: includeDeleted,
            #customWhereFilter: customWhereFilter,
            #customOrder: customOrder,
          },
        ),
        returnValue: _i6.Future<List<_i9.Task>>.value(<_i9.Task>[]),
      ) as _i6.Future<List<_i9.Task>>);

  @override
  _i6.Future<_i9.Task?> getById(
    String? id, {
    bool? includeDeleted = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
          {#includeDeleted: includeDeleted},
        ),
        returnValue: _i6.Future<_i9.Task?>.value(),
      ) as _i6.Future<_i9.Task?>);

  @override
  _i6.Future<_i9.Task?> getFirst(
    _i1.CustomWhereFilter? customWhereFilter, {
    bool? includeDeleted = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFirst,
          [customWhereFilter],
          {#includeDeleted: includeDeleted},
        ),
        returnValue: _i6.Future<_i9.Task?>.value(),
      ) as _i6.Future<_i9.Task?>);

  @override
  _i6.Future<void> add(_i9.Task? item) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [item],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> update(_i9.Task? item) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [item],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> delete(_i9.Task? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [SyncConflictResolutionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncConflictResolutionService extends _i2.Mock
    implements _i4.SyncConflictResolutionService {
  MockSyncConflictResolutionService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i4.ConflictResolutionResult<T>
      resolveConflict<T extends _i1.BaseEntity<String>>(
    T? localEntity,
    T? remoteEntity,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #resolveConflict,
              [
                localEntity,
                remoteEntity,
              ],
            ),
            returnValue: _FakeConflictResolutionResult_2<T>(
              this,
              Invocation.method(
                #resolveConflict,
                [
                  localEntity,
                  remoteEntity,
                ],
              ),
            ),
          ) as _i4.ConflictResolutionResult<T>);

  @override
  T copyRemoteDataToExistingTask<T extends _i1.BaseEntity<String>>(
    T? existingTask,
    T? remoteTask,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyRemoteDataToExistingTask,
          [
            existingTask,
            remoteTask,
          ],
        ),
        returnValue: _i10.dummyValue<T>(
          this,
          Invocation.method(
            #copyRemoteDataToExistingTask,
            [
              existingTask,
              remoteTask,
            ],
          ),
        ),
      ) as T);
}
