name: Flutter CI - Windows

on:
  workflow_dispatch: # This is a trigger for manual workflow run
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # Install dependencies
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Setup Visual Studio tools
        uses: microsoft/setup-msbuild@v2

      - name: Install Inno Setup
        run: |
          $url = "https://jrsoftware.org/download.php/is.exe"
          $output = "$env:TEMP\innosetup.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process -FilePath $output -ArgumentList "/VERYSILENT", "/NORESTART" -Wait
          echo "C:\Program Files (x86)\Inno Setup 6" >> $env:GITHUB_PATH

      - name: Install Flutter dependencies
        run: |
          flutter config --enable-windows-desktop
          flutter pub get
          Write-Host "Checking for plugin compatibility..."
          flutter pub deps

      - name: Clean previous builds
        run: flutter clean

      # Add workaround for flutter_local_notifications_windows AOT issue
      - name: Apply Windows build workarounds
        run: |
          Write-Host "Applying workarounds for Windows build issues..."
          
          # Check if the problematic plugin exists
          Write-Host "Checking for flutter_local_notifications_windows plugin..."
          if (Test-Path "pubspec.lock") {
            $pubspecLock = Get-Content "pubspec.lock" -Raw
            if ($pubspecLock -match "flutter_local_notifications_windows") {
              Write-Host "Found flutter_local_notifications_windows plugin - applying AOT workarounds"
              
              # Set environment variables to help with AOT compilation
              echo "FLUTTER_AOT_WORKAROUND=true" >> $env:GITHUB_ENV
              echo "FLUTTER_DISABLE_TREE_SHAKE=true" >> $env:GITHUB_ENV
              echo "FLUTTER_LOCAL_NOTIFICATIONS_DETECTED=true" >> $env:GITHUB_ENV
              
              Write-Host "Plugin version information:"
              Select-String -Path "pubspec.lock" -Pattern "flutter_local_notifications" -Context 5
            } else {
              Write-Host "flutter_local_notifications_windows plugin not found"
            }
          } else {
            Write-Host "pubspec.lock not found"
          }
          
          Write-Host "Setting additional build environment variables..."
          # These flags may help with the AOT compilation issue
          echo "FLUTTER_BUILD_MODE=release" >> $env:GITHUB_ENV

      - name: Build for Windows (with verbose output and multiple strategies)
        run: |
          Write-Host "Starting Windows build..."
          flutter config --enable-windows-desktop
          flutter doctor -v
          Write-Host "Cleaning previous builds..."
          flutter clean
          Write-Host "Getting dependencies..."
          flutter pub get
          
          Write-Host "Attempting Windows build with multiple strategies..."
          
          # Strategy 1: Standard release build
          Write-Host "Attempt 1: Standard release build"
          flutter build windows --release --verbose
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Standard release build succeeded!"
            echo "BUILD_TYPE=Release" >> $env:GITHUB_ENV
          } else {
            Write-Host "Standard release build failed with exit code: $LASTEXITCODE"
            
            # Strategy 2: Release build with tree-shake disabled
            Write-Host "Attempt 2: Release build with --no-tree-shake-icons"
            flutter build windows --release --no-tree-shake-icons --verbose
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Release build with --no-tree-shake-icons succeeded!"
              echo "BUILD_TYPE=Release" >> $env:GITHUB_ENV
            } else {
              Write-Host "Release build with --no-tree-shake-icons failed with exit code: $LASTEXITCODE"
              
              # Strategy 3: Profile build as fallback
              Write-Host "Attempt 3: Profile build as fallback"
              flutter build windows --profile --verbose
              if ($LASTEXITCODE -eq 0) {
                Write-Host "Profile build succeeded as fallback!"
                echo "BUILD_TYPE=Profile" >> $env:GITHUB_ENV
              } else {
                Write-Host "All build attempts failed! Profile build exit code: $LASTEXITCODE"
                exit 1
              }
            }
          }
          
          # Verify BUILD_TYPE was set
          if (-not $env:BUILD_TYPE) {
            Write-Host "WARNING: BUILD_TYPE not set, defaulting to Release"
            echo "BUILD_TYPE=Release" >> $env:GITHUB_ENV
          }
          
          Write-Host "Final BUILD_TYPE: $env:BUILD_TYPE"
        env:
          FLUTTER_BUILD_DIR: build

      - name: Debug build output on failure
        if: failure()
        run: |
          Write-Host "Build failed. Checking for build logs..."
          if (Test-Path "build/") {
            Get-ChildItem -Path "build/" -Recurse
          } else {
            Write-Host "No build directory found"
          }
          if (Test-Path "build/windows/") {
            Get-ChildItem -Path "build/windows/" -Recurse
          } else {
            Write-Host "No windows build directory found"
          }
          Write-Host "Checking for log files..."
          $logFiles = Get-ChildItem -Path "build/" -Recurse -Filter "*.log" -ErrorAction SilentlyContinue
          if ($logFiles) {
            foreach ($file in $logFiles) {
              Write-Host "=== Contents of $($file.FullName) ==="
              Get-Content $file.FullName
            }
          } else {
            Write-Host "No log files found"
          }

      # Publish the build artifacts
      - name: Debug build directory structure
        run: |
          Write-Host "=== Build Environment Info ==="
          Write-Host "BUILD_TYPE: ${{ env.BUILD_TYPE }}"
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "=== Build Directory Structure ==="
          if (Test-Path "build") {
            Write-Host "build/ directory contents:"
            Get-ChildItem "build" -Recurse | ForEach-Object {
              if ($_.PSIsContainer) {
                Write-Host "  DIR:  $($_.FullName.Replace((Get-Location).Path, ''))"
              } else {
                Write-Host "  FILE: $($_.FullName.Replace((Get-Location).Path, '')) ($($_.Length) bytes)"
              }
            }
          } else {
            Write-Host "‚ùå build/ directory does not exist"
          }
          Write-Host "=== End Build Directory Structure ==="

      - name: Verify build output
        run: |
          Write-Host "Verifying build output in ${{ env.BUILD_TYPE }} folder..."
          $buildPath = "build\windows\x64\runner\${{ env.BUILD_TYPE }}"
          if (Test-Path $buildPath) {
            Write-Host "Build folder exists: $buildPath"
            Get-ChildItem -Path $buildPath -Recurse | Where-Object { -not $_.PSIsContainer } | ForEach-Object {
              Write-Host "File: $($_.FullName) (Size: $($_.Length) bytes)"
            }
          } else {
            Write-Host "ERROR: Build folder not found: $buildPath"
            exit 1
          }

      - name: Create Windows Installer
        run: |
          Write-Host "Creating Windows installer with Inno Setup..."
          
          # Get app version for the installer
          $content = Get-Content 'pubspec.yaml'
          $version = $content | Select-String 'version: (.*)' | ForEach-Object { $_.Matches.Groups[1].Value.Split('+')[0] }
          Write-Host "App version: $version"
          
          # Verify the build output exists
          $buildPath = "build\windows\x64\runner\${{ env.BUILD_TYPE }}"
          Write-Host "Checking build output at: $buildPath"
          if (-not (Test-Path $buildPath)) {
            Write-Host "ERROR: Build output not found at $buildPath"
            Write-Host "Available build directories:"
            if (Test-Path "build\windows\x64\runner") {
              Get-ChildItem "build\windows\x64\runner" | ForEach-Object { Write-Host "  - $($_.Name)" }
            }
            exit 1
          }
          
          # Create installer directory
          New-Item -ItemType Directory -Force -Path "build\windows\installer"
          
          # Create a copy of the installer script with dynamic paths
          $issTemplate = Get-Content 'windows\installer.iss' -Raw
          $issTemplate = $issTemplate -replace 'AppVersion=.*', "AppVersion=$version"
          $issTemplate = $issTemplate -replace 'Source: "\.\.\\build\\windows\\x64\\runner\\Release\\\*"', "Source: `"..\build\windows\x64\runner\${{ env.BUILD_TYPE }}\*`""
          $issTemplate = $issTemplate -replace 'OutputDir=build\\windows\\installer', "OutputDir=build\windows\installer"
          
          # Write the modified script to a temporary file
          $tempIssFile = "windows\installer_temp.iss"
          $issTemplate | Set-Content $tempIssFile
          
          # Check if Inno Setup is available
          $innoSetupPath = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          if (-not (Test-Path $innoSetupPath)) {
            Write-Host "Inno Setup not found at expected location. Searching for ISCC.exe..."
            $innoSetupPath = Get-Command "ISCC.exe" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
            if (-not $innoSetupPath) {
              Write-Host "ERROR: Inno Setup (ISCC.exe) not found"
              exit 1
            }
          }
          
          Write-Host "Using Inno Setup at: $innoSetupPath"
          Write-Host "Compiling installer with build type: ${{ env.BUILD_TYPE }}"
          
          # Compile the installer
          & "$innoSetupPath" $tempIssFile
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Installer created successfully!"
            $installerPath = "build\windows\installer\whph-setup.exe"
            if (Test-Path $installerPath) {
              $installerSize = (Get-Item $installerPath).Length
              Write-Host "Installer size: $($installerSize / 1MB) MB"
              Write-Host "Installer path verified: $installerPath"
            } else {
              Write-Host "ERROR: Installer file not found at expected location: $installerPath"
              Write-Host "Contents of installer directory:"
              if (Test-Path "build\windows\installer") {
                Get-ChildItem "build\windows\installer" | ForEach-Object { Write-Host "  - $($_.Name)" }
              }
              exit 1
            }
          } else {
            Write-Host "ERROR: Installer creation failed with exit code: $LASTEXITCODE"
            exit 1
          }
          
          # Clean up temporary file
          if (Test-Path $tempIssFile) {
            Remove-Item $tempIssFile
          }

      - name: Get application version
        id: app_version
        run: |
          $content = Get-Content 'pubspec.yaml'
          $version = $content | Select-String 'version: (.*)' | ForEach-Object { $_.Matches.Groups[1].Value }
          echo "APP_VERSION=$version" >> $env:GITHUB_ENV

      - name: Upload Windows build artifact (Portable)
        uses: actions/upload-artifact@v4
        with:
          name: whph-v${{ env.APP_VERSION }}-windows-portable
          path: build\windows\x64\runner\${{ env.BUILD_TYPE }}\
          if-no-files-found: error
          compression-level: 6
          overwrite: false
          include-hidden-files: false

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: whph-v${{ env.APP_VERSION }}-windows-installer
          path: build\windows\installer\whph-setup.exe
          if-no-files-found: error
          compression-level: 0
          overwrite: false

      - name: Verify installer artifact exists
        run: |
          $installerPath = "build\windows\installer\whph-setup.exe"
          Write-Host "Verifying installer artifact exists at: $installerPath"
          if (Test-Path $installerPath) {
            $fileInfo = Get-Item $installerPath
            Write-Host "‚úÖ Installer found: $($fileInfo.FullName)"
            Write-Host "   Size: $($fileInfo.Length / 1MB) MB"
            Write-Host "   Created: $($fileInfo.CreationTime)"
            Write-Host "   Modified: $($fileInfo.LastWriteTime)"
          } else {
            Write-Host "‚ùå ERROR: Installer not found at expected location"
            Write-Host "Contents of build\windows\installer directory:"
            if (Test-Path "build\windows\installer") {
              Get-ChildItem "build\windows\installer" | ForEach-Object { 
                Write-Host "  - $($_.Name) ($($_.Length) bytes)" 
              }
            } else {
              Write-Host "  Directory does not exist"
            }
            Write-Host "Contents of build\windows directory:"
            if (Test-Path "build\windows") {
              Get-ChildItem "build\windows" -Recurse | ForEach-Object { 
                if (-not $_.PSIsContainer) {
                  Write-Host "  File: $($_.FullName.Replace((Get-Location).Path, ''))"
                }
              }
            } else {
              Write-Host "  Directory does not exist"
            }
            exit 1
          }

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Get application version
        id: app_version
        run: |
          APP_VERSION=$(awk '/^version:/ {print $2}' pubspec.yaml)
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

      - name: Get tag name
        id: tag_name
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Get tag version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: whph-v${{ env.APP_VERSION }}-windows-*
          path: artifacts
          merge-multiple: false

      # Create a zip archive from the portable build output
      - name: Create portable zip archive
        run: |
          cd artifacts/whph-v${{ env.APP_VERSION }}-windows-portable
          zip -r ../../whph-v${{ env.TAG_VERSION }}-windows-portable.zip .

      - name: Prepare installer for release  
        run: |
          cp artifacts/whph-v${{ env.APP_VERSION }}-windows-installer/whph-setup.exe whph-v${{ env.TAG_VERSION }}-windows-setup.exe

      - name: Check existing release
        id: check_release
        run: |
          RELEASE_TAG="${{ github.ref_name }}"
          if gh release view "$RELEASE_TAG" &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            whph-v${{ env.TAG_VERSION }}-windows-portable.zip
            whph-v${{ env.TAG_VERSION }}-windows-setup.exe
          name: ${{ env.TAG_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
          generate_release_notes: ${{ steps.check_release.outputs.exists == 'false' }}
          append_body: ${{ steps.check_release.outputs.exists == 'true' }}
