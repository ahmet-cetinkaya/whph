name: Flutter CI - Windows

on:
  workflow_dispatch: # This is a trigger for manual workflow run
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # Install dependencies
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Setup Visual Studio tools
        uses: microsoft/setup-msbuild@v2

      - name: Install Flutter dependencies
        run: |
          flutter config --enable-windows-desktop
          flutter pub get
          Write-Host "Checking for plugin compatibility..."
          flutter pub deps

      - name: Clean previous builds
        run: flutter clean

      # Add workaround for flutter_local_notifications_windows AOT issue
      - name: Apply Windows build workarounds
        run: |
          Write-Host "Applying workarounds for Windows build issues..."
          
          # Check if the problematic plugin exists
          Write-Host "Checking for flutter_local_notifications_windows plugin..."
          if (Test-Path "pubspec.lock") {
            $pubspecLock = Get-Content "pubspec.lock" -Raw
            if ($pubspecLock -match "flutter_local_notifications_windows") {
              Write-Host "Found flutter_local_notifications_windows plugin - applying AOT workarounds"
              
              # Set environment variables to help with AOT compilation
              echo "FLUTTER_AOT_WORKAROUND=true" >> $env:GITHUB_ENV
              echo "FLUTTER_DISABLE_TREE_SHAKE=true" >> $env:GITHUB_ENV
              echo "FLUTTER_LOCAL_NOTIFICATIONS_DETECTED=true" >> $env:GITHUB_ENV
              
              Write-Host "Plugin version information:"
              Select-String -Path "pubspec.lock" -Pattern "flutter_local_notifications" -Context 5
            } else {
              Write-Host "flutter_local_notifications_windows plugin not found"
            }
          } else {
            Write-Host "pubspec.lock not found"
          }
          
          Write-Host "Setting additional build environment variables..."
          # These flags may help with the AOT compilation issue
          echo "FLUTTER_BUILD_MODE=release" >> $env:GITHUB_ENV

      - name: Build for Windows (with verbose output and multiple strategies)
        run: |
          Write-Host "Starting Windows build..."
          flutter config --enable-windows-desktop
          flutter doctor -v
          Write-Host "Cleaning previous builds..."
          flutter clean
          Write-Host "Getting dependencies..."
          flutter pub get
          
          Write-Host "Attempting Windows build with multiple strategies..."
          
          # Strategy 1: Standard release build
          Write-Host "Attempt 1: Standard release build"
          flutter build windows --release --verbose
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Standard release build succeeded!"
          } else {
            Write-Host "Standard release build failed with exit code: $LASTEXITCODE"
            
            # Strategy 2: Release build with tree-shake disabled
            Write-Host "Attempt 2: Release build with --no-tree-shake-icons"
            flutter build windows --release --no-tree-shake-icons --verbose
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Release build with --no-tree-shake-icons succeeded!"
            } else {
              Write-Host "Release build with --no-tree-shake-icons failed with exit code: $LASTEXITCODE"
              
              # Strategy 3: Profile build as fallback
              Write-Host "Attempt 3: Profile build as fallback"
              flutter build windows --profile --verbose
              if ($LASTEXITCODE -eq 0) {
                Write-Host "Profile build succeeded as fallback!"
              } else {
                Write-Host "All build attempts failed! Profile build exit code: $LASTEXITCODE"
                exit 1
              }
            }
          }
        env:
          FLUTTER_BUILD_DIR: build

      - name: Debug build output on failure
        if: failure()
        run: |
          Write-Host "Build failed. Checking for build logs..."
          if (Test-Path "build/") {
            Get-ChildItem -Path "build/" -Recurse
          } else {
            Write-Host "No build directory found"
          }
          if (Test-Path "build/windows/") {
            Get-ChildItem -Path "build/windows/" -Recurse
          } else {
            Write-Host "No windows build directory found"
          }
          Write-Host "Checking for log files..."
          $logFiles = Get-ChildItem -Path "build/" -Recurse -Filter "*.log" -ErrorAction SilentlyContinue
          if ($logFiles) {
            foreach ($file in $logFiles) {
              Write-Host "=== Contents of $($file.FullName) ==="
              Get-Content $file.FullName
            }
          } else {
            Write-Host "No log files found"
          }

      # Publish the build artifacts
      - name: Get application version
        id: app_version
        run: |
          $content = Get-Content 'pubspec.yaml'
          $version = $content | Select-String 'version: (.*)' | ForEach-Object { $_.Matches.Groups[1].Value }
          echo "APP_VERSION=$version" >> $env:GITHUB_ENV

      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: whph-v${{ env.APP_VERSION }}-windows
          path: build\windows\x64\runner\Release\
          if-no-files-found: error
          compression-level: 6
          overwrite: false
          include-hidden-files: false

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Get application version
        id: app_version
        run: |
          APP_VERSION=$(awk '/^version:/ {print $2}' pubspec.yaml)
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

      - name: Get tag name
        id: tag_name
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Get tag version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: whph-v${{ env.APP_VERSION }}-windows
          path: windows-build

      # Create a zip archive from the build output
      - name: Create zip archive
        run: cd windows-build && zip -r ../whph-v${TAG_VERSION}-windows.zip .

      - name: Check existing release
        id: check_release
        run: |
          RELEASE_TAG="${{ github.ref_name }}"
          if gh release view "$RELEASE_TAG" &>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: whph-v${{ env.TAG_VERSION }}-windows.zip
          name: ${{ env.TAG_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
          generate_release_notes: ${{ steps.check_release.outputs.exists == 'false' }}
          append_body: ${{ steps.check_release.outputs.exists == 'true' }}
